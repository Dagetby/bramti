type User {
    id: ID!
    name: String!
    twits: [Twit!]
}

type Twit {
    id: ID!
    contentText: String!
    publicationDate: Time!
    author: User!
}

type Subscription {
    twitPublished(id: ID!): Twit!
}

input NewTwit {
    contextText: String!
    userId: ID!
}

input NewUser {
    userId: ID!
    name: String!
}

type Mutation {
    createTwit(input: NewTwit!): Twit!
    createUser(input: NewUser!): User!
}

type Query {
    twits(id: ID!, limit: Int = 10, offset: Int = 0): [Twit!]
}

scalar Time
